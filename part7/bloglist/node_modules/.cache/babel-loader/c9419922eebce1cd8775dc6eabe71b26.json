{"ast":null,"code":"import blogService from '../services/blogs';\nimport { triggerError, triggerSuccess } from './notificationReducer';\nexport const addBlog = (title, author, url) => {\n  return async dispatch => {\n    try {\n      const newBlog = await blogService.postBlog(title, author, url);\n      dispatch(triggerSuccess('Successfully posted blog'));\n      dispatch({\n        type: 'ADD_BLOG',\n        data: newBlog\n      });\n    } catch (exception) {\n      let error_msg = 'Error posting blog!';\n\n      if (exception.response.status === 400) {\n        error_msg = 'Could not post blog. Title and url are required!';\n      } else if (exception.response.status === 401) {\n        error_msg = 'Invalid login token. Please logout and then login again.';\n      } else {\n        error_msg = 'Could not post blog. Error unknown.';\n      }\n\n      dispatch(triggerError(error_msg));\n    }\n  };\n};\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    blogs.sort((first, second) => {\n      if (first.likes > second.likes) {\n        return -1;\n      } else if (first.likes < second.likes) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    dispatch({\n      type: 'INIT_BLOGS',\n      data: blogs\n    });\n  };\n};\nexport const likeBlog = id => {\n  return async dispatch => {\n    try {\n      const response = await blogService.likeBlog(id);\n    } catch (exception) {\n      triggerError('Error liking blog');\n    }\n\n    dispatch(initBlogs());\n  };\n};\n\nconst blogReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_BLOG':\n      return [...state, action.data];\n\n    case 'INIT_BLOGS':\n      return action.data;\n\n    default:\n      return state;\n  }\n};\n\nexport default blogReducer;","map":{"version":3,"sources":["/home/arttu/devaus/fullstackopen/part7/bloglist/src/reducers/blogReducer.js"],"names":["blogService","triggerError","triggerSuccess","addBlog","title","author","url","dispatch","newBlog","postBlog","type","data","exception","error_msg","response","status","initBlogs","blogs","getAll","sort","first","second","likes","likeBlog","id","blogReducer","state","action"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,uBAA7C;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,EAAgBC,GAAhB,KAAwB;AAC7C,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMR,WAAW,CAACS,QAAZ,CAAqBL,KAArB,EAA4BC,MAA5B,EAAoCC,GAApC,CAAtB;AACAC,MAAAA,QAAQ,CAACL,cAAc,CAAC,0BAAD,CAAf,CAAR;AACAK,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAE,UADC;AAEPC,QAAAA,IAAI,EAAEH;AAFC,OAAD,CAAR;AAID,KAPD,CAOE,OAAOI,SAAP,EAAkB;AAClB,UAAIC,SAAS,GAAG,qBAAhB;;AACA,UAAID,SAAS,CAACE,QAAV,CAAmBC,MAAnB,KAA8B,GAAlC,EAAuC;AACrCF,QAAAA,SAAS,GAAG,kDAAZ;AACD,OAFD,MAEO,IAAID,SAAS,CAACE,QAAV,CAAmBC,MAAnB,KAA8B,GAAlC,EAAuC;AAC5CF,QAAAA,SAAS,GAAG,0DAAZ;AACD,OAFM,MAEA;AACLA,QAAAA,SAAS,GAAG,qCAAZ;AACD;;AACDN,MAAAA,QAAQ,CAACN,YAAY,CAACY,SAAD,CAAb,CAAR;AACD;AACF,GAnBD;AAoBD,CArBM;AAuBP,OAAO,MAAMG,SAAS,GAAG,MAAM;AAC7B,SAAO,MAAMT,QAAN,IAAkB;AACvB,UAAMU,KAAK,GAAG,MAAMjB,WAAW,CAACkB,MAAZ,EAApB;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAW,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5B,UAAGD,KAAK,CAACE,KAAN,GAAcD,MAAM,CAACC,KAAxB,EAA+B;AAC7B,eAAO,CAAC,CAAR;AACD,OAFD,MAEO,IAAIF,KAAK,CAACE,KAAN,GAAcD,MAAM,CAACC,KAAzB,EAAgC;AACrC,eAAO,CAAP;AACD,OAFM,MAEA;AACL,eAAO,CAAP;AACD;AACF,KARD;AASAf,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,IAAI,EAAEM;AAFC,KAAD,CAAR;AAID,GAfD;AAgBD,CAjBM;AAmBP,OAAO,MAAMM,QAAQ,GAAIC,EAAD,IAAQ;AAC9B,SAAO,MAAMjB,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMO,QAAQ,GAAG,MAAMd,WAAW,CAACuB,QAAZ,CAAqBC,EAArB,CAAvB;AACD,KAFD,CAEE,OAAOZ,SAAP,EAAkB;AAClBX,MAAAA,YAAY,CAAC,mBAAD,CAAZ;AACD;;AACDM,IAAAA,QAAQ,CAACS,SAAS,EAAV,CAAR;AACD,GAPD;AAQD,CATM;;AAcP,MAAMS,WAAW,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC1C,UAAQA,MAAM,CAACjB,IAAf;AACA,SAAK,UAAL;AACE,aAAO,CAAC,GAAGgB,KAAJ,EAAWC,MAAM,CAAChB,IAAlB,CAAP;;AACF,SAAK,YAAL;AACE,aAAOgB,MAAM,CAAChB,IAAd;;AACF;AACE,aAAOe,KAAP;AANF;AAQD,CATD;;AAWA,eAAeD,WAAf","sourcesContent":["import blogService from '../services/blogs'\nimport { triggerError, triggerSuccess } from './notificationReducer'\n\nexport const addBlog = (title, author, url) => {\n  return async dispatch => {\n    try {\n      const newBlog = await blogService.postBlog(title, author, url)\n      dispatch(triggerSuccess('Successfully posted blog'))\n      dispatch({\n        type: 'ADD_BLOG',\n        data: newBlog\n      })\n    } catch (exception) {\n      let error_msg = 'Error posting blog!'\n      if (exception.response.status === 400) {\n        error_msg = 'Could not post blog. Title and url are required!'\n      } else if (exception.response.status === 401) {\n        error_msg = 'Invalid login token. Please logout and then login again.'\n      } else {\n        error_msg = 'Could not post blog. Error unknown.'\n      }\n      dispatch(triggerError(error_msg))\n    }\n  }\n}\n\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll()\n    blogs.sort((first, second) => {\n      if(first.likes > second.likes) {\n        return -1\n      } else if (first.likes < second.likes) {\n        return 1\n      } else {\n        return 0\n      }\n    })\n    dispatch({\n      type: 'INIT_BLOGS',\n      data: blogs\n    })\n  }\n}\n\nexport const likeBlog = (id) => {\n  return async dispatch => {\n    try {\n      const response = await blogService.likeBlog(id)\n    } catch (exception) {\n      triggerError('Error liking blog')\n    }\n    dispatch(initBlogs())\n  }\n}\n\n\n\n\nconst blogReducer = (state = [], action) => {\n  switch (action.type) {\n  case 'ADD_BLOG':\n    return [...state, action.data]\n  case 'INIT_BLOGS':\n    return action.data\n  default:\n    return state\n  }\n}\n\nexport default blogReducer"]},"metadata":{},"sourceType":"module"}