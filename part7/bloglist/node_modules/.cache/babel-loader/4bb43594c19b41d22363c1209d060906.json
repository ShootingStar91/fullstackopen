{"ast":null,"code":"import blogService from '../services/blogs';\nimport { triggerError, triggerSuccess } from './notificationReducer';\nexport const addBlog = (title, author, url) => {\n  return async dispatch => {\n    try {\n      const newBlog = await blogService.postBlog(title, author, url);\n      dispatch(triggerSuccess('Successfully posted blog'));\n      dispatch({\n        type: 'ADD_BLOG',\n        data: newBlog\n      });\n    } catch (exception) {\n      let error_msg = 'Error posting blog!';\n\n      if (exception.response.status === 400) {\n        error_msg = 'Could not post blog. Title and url are required!';\n      } else if (exception.response.status === 401) {\n        error_msg = 'Invalid login token. Please logout and then login again.';\n      } else {\n        error_msg = 'Could not post blog. Error unknown.';\n      }\n\n      dispatch(triggerError(error_msg));\n    }\n  };\n};\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    blogs.sort((first, second) => {\n      if (first.likes > second.likes) {\n        return -1;\n      } else if (first.likes < second.likes) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    console.log('init blogs dispatching INIT BLOGS');\n    dispatch({\n      type: 'INIT_BLOGS',\n      data: blogs\n    });\n  };\n};\nexport const likeBlog = blog => {\n  console.log('BLOG INSIDE likeBlog action ');\n  console.log(blog);\n  return async dispatch => {\n    try {\n      await blogService.likeBlog(blog.id, blog.likes);\n      dispatch(triggerSuccess('Liked blog'));\n      dispatch({\n        type: 'LIKE_BLOG',\n        data: blog.id\n      });\n    } catch (exception) {\n      dispatch(triggerError('Error liking blog'));\n      console.log('like blog error: ');\n      console.log(exception);\n    }\n\n    dispatch(initBlogs());\n  };\n};\nexport const deleteBlog = blog => {\n  if (!window.confirm('Are you sure you want to delete: ' + blog.title)) return;\n  return async dispatch => {\n    try {\n      await blogService.deleteBlog(blog.id);\n      dispatch(triggerSuccess('Blog deleted successfully'));\n      dispatch({\n        type: 'DELETE BLOG',\n        data: blog.id\n      });\n    } catch (exception) {\n      dispatch(triggerError('Error deleting blog'));\n    }\n  };\n};\n\nconst blogReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log('blogReducer');\n  console.log(state, action);\n\n  switch (action.type) {\n    case 'ADD_BLOG':\n      return [...state, action.data];\n\n    case 'INIT_BLOGS':\n      return action.data;\n\n    case 'LIKE_BLOG':\n      state[action.data].likes += 1;\n      return [...state];\n\n    case 'DELETE_BLOG':\n      state = state.filter(blog => blog.id !== action.data);\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default blogReducer;","map":{"version":3,"sources":["/home/arttu/devaus/fullstackopen/part7/bloglist/src/reducers/blogReducer.js"],"names":["blogService","triggerError","triggerSuccess","addBlog","title","author","url","dispatch","newBlog","postBlog","type","data","exception","error_msg","response","status","initBlogs","blogs","getAll","sort","first","second","likes","console","log","likeBlog","blog","id","deleteBlog","window","confirm","blogReducer","state","action","filter"],"mappings":"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","sourcesContent":["import blogService from '../services/blogs'\nimport { triggerError, triggerSuccess } from './notificationReducer'\n\nexport const addBlog = (title, author, url) => {\n  return async dispatch => {\n    try {\n      const newBlog = await blogService.postBlog(title, author, url)\n      dispatch(triggerSuccess('Successfully posted blog'))\n      dispatch({\n        type: 'ADD_BLOG',\n        data: newBlog\n      })\n    } catch (exception) {\n      let error_msg = 'Error posting blog!'\n      if (exception.response.status === 400) {\n        error_msg = 'Could not post blog. Title and url are required!'\n      } else if (exception.response.status === 401) {\n        error_msg = 'Invalid login token. Please logout and then login again.'\n      } else {\n        error_msg = 'Could not post blog. Error unknown.'\n      }\n      dispatch(triggerError(error_msg))\n    }\n  }\n}\n\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll()\n    blogs.sort((first, second) => {\n      if(first.likes > second.likes) {\n        return -1\n      } else if (first.likes < second.likes) {\n        return 1\n      } else {\n        return 0\n      }\n    })\n    console.log('init blogs dispatching INIT BLOGS')\n    dispatch({\n      type: 'INIT_BLOGS',\n      data: blogs\n    })\n  }\n}\n\nexport const likeBlog = (blog) => {\n  console.log('BLOG INSIDE likeBlog action ')\n  console.log(blog)\n  return async dispatch => {\n    try {\n      await blogService.likeBlog(blog.id, blog.likes)\n      dispatch(triggerSuccess('Liked blog'))\n      dispatch({ type: 'LIKE_BLOG', data: blog.id })\n    } catch (exception) {\n      dispatch(triggerError('Error liking blog'))\n      console.log('like blog error: ')\n      console.log(exception)\n    }\n    dispatch(initBlogs())\n  }\n}\n\nexport const deleteBlog = (blog) => {\n  if (!window.confirm(\n    'Are you sure you want to delete: ' + blog.title\n  )\n  ) return\n\n  return async dispatch => {\n    try {\n      await blogService.deleteBlog(blog.id)\n      dispatch(triggerSuccess('Blog deleted successfully'))\n      dispatch({ type: 'DELETE BLOG', data: blog.id })\n    } catch (exception) {\n      dispatch(triggerError('Error deleting blog'))\n    }\n  }\n}\n\n\nconst blogReducer = (state = [], action) => {\n  console.log('blogReducer')\n  console.log(state, action)\n  switch (action.type) {\n  case 'ADD_BLOG':\n    return [...state, action.data]\n  case 'INIT_BLOGS':\n    return action.data\n  case 'LIKE_BLOG':\n    state[action.data].likes += 1\n    return [...state]\n  case 'DELETE_BLOG':\n    state = state.filter(blog => blog.id !== action.data)\n    return state\n  default:\n    return state\n  }\n}\n\nexport default blogReducer"]},"metadata":{},"sourceType":"module"}